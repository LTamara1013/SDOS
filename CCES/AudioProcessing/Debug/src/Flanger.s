	.file "..\src\Flanger.c";
//  Compilation time: Mon Feb  1 19:27:51 2021
//  Compiler options: -c -file-attr ProjectName=AudioProcessing -proc ADSP-21489 -flags-compiler --no_wrap_diagnostics -si-revision 0.2 -g -save-temps -path-output .\src -DCORE0 -D_DEBUG -ID:/CrossCore/Workspace/AudioProcessing/system -structs-do-not-overlap -no-const-strings -multiline -warn-protos -Wremarks -double-size-32 -swc -gnu-style-dependencies -MD -Mo src\Flanger.d -o src\Flanger.doj
//  Compiler version: 8.15.1.0 (61a2eff16741378b1ae40f6392a0806696679a50)
//  Architecture: ADSP-21489
//  Silicon revision: 0.2
//  Anomalies summary:
//   Disabled: w_anomaly_45, w_anomaly_2126x_4, w_dag_stall, w_2136x_multi, w_2136x_mem_write, w_09000014, w_09000018, w_09000020, w_07000009_1, w_07000009_2, w_09000021, w_09000022, w_15000011, w_09000023, w_15000016, w_15000023, w_20000002, w_20000022, w_20000020, w_20000024, w_20000023, w_20000009, w_20000069, w_20000083
//   Enabled: w_15000003, w_15000004, w_15000005
//   Always on: w_simd, w_restore_loop_stack

	.section/SW/DOUBLE32 seg_swco;

.epctext:

_flanger:
.LN_flanger:
//-------------------------------------------------------------------
//  Procedure statistics:
//  Frame size            = 16 words
//  Scratch registers used: {r0-r2,r4,r8,r12,i4,i12,m4,acc,mcc}
//  Call preserved registers used: {r7,r14-r15,m3}
//  Registers that could be clobbered by function calls: {r0-r2,r4,r8,r12,s0-s15,i4,i12-i13,b4,b12-b13,m4,m12,ustat1-ustat4,acc,mcc,scc,btf,sacc,smcc,sscc,sbtf,stky,stkyy,msf,msb,lcntr,px}
//-------------------------------------------------------------------
// line "..\src\Flanger.c":27
	modify(i7,-14);
	dm(-14,i6)=r7;
	dm(-13,i6)=r14;
	dm(-12,i6)=r15;
	r2=m3;
	dm(-11,i6)=r2;
	r2=dm(m6,i6);
	r1=dm(2,i6);
	dm(2,i6)=r1;
	dm(m6,i6)=r2;
	dm(-8,i6)=r12;
	dm(-9,i6)=r8;
	dm(-10,i6)=r4;
.LN0:
// line 28
	r4=1086918619;
	f0=f2*f4;
	r12=951990214;
	r2=1177306112;
	f1=f0*f12;
	r8=mant f1;
	f2=f1*f2;
	if not av f2=f2-f0;
	f2=f2*f12;
	if not av f1=f1-f2;
	dm(-7,i6)=r1;
.LN1:
// line 30
	dm(-6,i6)=m13;

.P34L1:
//-------------------------------------------------------------------
//   Loop at "..\src\Flanger.c" line 30 col 5
//-------------------------------------------------------------------
.LN2:
	r2=dm(-6,i6);
	r1=dm(-8,i6);
	comp(r1,r2);
	if le jump (pc,.P34L3);

.LN3:
// line 31
	f2=float r2;
	r4=dm(-7,i6);
	f4=f2*f4;
.LN4:
	cjump _sinf (db); dm(i7,m7)=r2; dm(i7,m7)=.LCJ0-1;
.LCJ0:
.LN5:
	r12=1065353216;
	f2=f0+f12;
	r4=1099169792;
	f8=f2*f4;
	dm(-5,i6)=r8;
.LN6:
// line 32
	r15=trunc f8;
	dm(-4,i6)=r15;
.LN7:
// line 33
	f14=float r15;
	f2=f8-f14;
	dm(-3,i6)=r2;
.LN8:
// line 35
	r8=dm(-6,i6);
	r2=r8-r15;
	r1=r2-1;
	r1=pass r1;
	if lt jump (pc,.P34L5);

.LN9:
// line 37
	i4=dm(-10,i6);
	m3=dm(-6,i6);
	m4=r2;
	r2=dm(m4,i4);
	r4=dm(-3,i6);
	f7=f12-f4;
	f8=f2*f7;
	m4=r1;
	r2=dm(m4,i4);
	f12=f2*f4;
	f2=f8+f12;
	dm(-2,i6)=r2;
.LN10:
// line 39
	r8=dm(m3,i4);
	r4=dm(2,i6);
	f12=f2*f4;
	f2=f8+f12;
	i4=dm(-9,i6);
	dm(m3,i4)=r2;
.LN11:
// line 40
	jump (pc,.P34L6);

.P34L5:
.LN12:
// line 41
	i4=dm(-10,i6);
	m4=r8;
	r2=dm(m4,i4);
	i4=dm(-9,i6);
	dm(m4,i4)=r2;

.P34L6:
.LN13:
// line 30
	r2=dm(-6,i6);
	r2=r2+1;
	dm(-6,i6)=r2;
	jump (pc,.P34L1);
//-------------------------------------------------------------------
//   End Loop L1
//-------------------------------------------------------------------

.P34L3:
//-------------------------------------------------------------------
//   Part of top level (no loop)
//-------------------------------------------------------------------
.LN14:
// line 44
	r4=dm(-9,i6);
	r8=dm(-8,i6);
.LN15:
	cjump _normalization (db); dm(i7,m7)=r2; dm(i7,m7)=.LCJ1-1;
.LCJ1:
.LN16:
// line 45
	m3=dm(-11,i6);
	r7=dm(-14,i6);
	r14=dm(-13,i6);
	r15=dm(-12,i6);
	i12=dm(m7,i6);
	jump (m14,i12) (db); rframe; nop;
.LN._flanger.end:
._flanger.end:
	.global _flanger;
	.type _flanger,STT_FUNC;

_flanger_with_feedback:
.LN_flanger_with_feedback:
//-------------------------------------------------------------------
//  Procedure statistics:
//  Frame size            = 14 words
//  Scratch registers used: {r0-r2,r4,r8,r12,i4,i12,m4,acc,mcc}
//  Call preserved registers used: {i5,m3}
//  Registers that could be clobbered by function calls: {r0-r2,r4,r8,r12,s0-s15,i4,i12-i13,b4,b12-b13,m4,m12,ustat1-ustat4,acc,mcc,scc,btf,sacc,smcc,sscc,sbtf,stky,stkyy,msf,msb,lcntr,px}
//-------------------------------------------------------------------
// line "..\src\Flanger.c":118
	modify(i7,-12);
	r2=m3;
	dm(-12,i6)=r2;
	r2=i5;
	dm(-11,i6)=r2;
	r2=dm(m6,i6);
	r1=dm(2,i6);
	r0=dm(3,i6);
	dm(3,i6)=r0;
	dm(2,i6)=r1;
	dm(m6,i6)=r2;
	dm(-8,i6)=r12;
	dm(-9,i6)=r8;
	dm(-10,i6)=r4;
.LN17:
// line 119
	r4=1086918619;
	f0=f2*f4;
	r12=951990214;
	r2=1177306112;
	f1=f0*f12;
	r8=mant f1;
	f2=f1*f2;
	if not av f2=f2-f0;
	f2=f2*f12;
	if not av f1=f1-f2;
	dm(-7,i6)=r1;
.LN18:
// line 121
	dm(-6,i6)=m13;

.P37L1:
//-------------------------------------------------------------------
//   Loop at "..\src\Flanger.c" line 121 col 5
//-------------------------------------------------------------------
//   This loop executes 1 iteration of the original loop in an estimated 58 
//   cycles (includes 11 stalls but excludes the cost of function calls).
//-------------------------------------------------------------------
//   This loop's resource usage is:
//     dm dag                          used  32 out of   58 ( 55.2%)
//     pm dag                          used  32 out of   58 ( 55.2%)
//     shift immediate                 used  32 out of   58 ( 55.2%)
//     multifunction float multiply    used  21 out of   58 ( 36.2%)
//     multifunction mult              used  21 out of   58 ( 36.2%)
//     multifunction alu               used  19 out of   58 ( 32.8%)
//     multifunction integer multiply  used  19 out of   58 ( 32.8%)
//     multifunction integer add sub   used  17 out of   58 ( 29.3%)
//     memory access                   used  32 out of  116 ( 27.6%)
//-------------------------------------------------------------------
	// -- 2 stalls --
.LN19:
	r2=dm(-6,i6);
	r1=dm(-8,i6);
	comp(r1,r2);
	// -- stall --
	if le jump (pc,.P37L3);

.LN20:
// line 122
	r1=dm(-7,i6);
	f4=float r2;
	f4=f1*f4;
.LN21:
	cjump _sinf (db); dm(i7,m7)=r2; dm(i7,m7)=.LCJ2-1;
.LCJ2:
.LN22:
	r2=1065353216;
	f2=(f0+f2)/2;
	r4=1107558400;
	f2=f2*f4;
	dm(-5,i6)=r2;
.LN23:
// line 123
	r2=trunc f2;
	dm(-4,i6)=r2;
.LN24:
// line 125
	r4=dm(-6,i6);
	m4=r4;
	r8=34;
	cjump ___divrem_s32 (db); dm(i7,m7)=r2; dm(i7,m7)=.LCJ3-1;// modulo is implemented as a library call. There is 1 more instruction related to this call. 
.LCJ3:
	m3=r1;
	dm(-3,i6)=r1;
.LN25:
// line 126
	i4=_delayBuffer;
	// -- 2 stalls --
	r2=dm(m3,i4);
	dm(-2,i6)=r2;
.LN26:
// line 128
	i5=dm(-10,i6);
	// -- 2 stalls --
	r8=dm(m4,i5);
	r4=dm(2,i6);
	f12=f2*f4;
	f2=f8+f12;
	dm(m3,i4)=r2;
.LN27:
// line 130
	i4=dm(-10,i6);
	m4=dm(-6,i6);
	// -- 2 stalls --
	r8=dm(m4,i4);
	r2=dm(3,i6);
	r4=dm(-2,i6);
	f12=f2*f4;
	f2=f8+f12;
	i4=dm(-9,i6);
	// -- 2 stalls --
	dm(m4,i4)=r2;
.LN28:
// line 121
	r2=dm(-6,i6);
	r2=r2+1;
	dm(-6,i6)=r2;
	jump (pc,.P37L1);
//-------------------------------------------------------------------
//   End Loop L1
//-------------------------------------------------------------------

.P37L3:
//-------------------------------------------------------------------
//   Part of top level (no loop)
//-------------------------------------------------------------------
.LN29:
// line 133
	r4=dm(-9,i6);
	r8=dm(-8,i6);
.LN30:
	cjump _normalization (db); dm(i7,m7)=r2; dm(i7,m7)=.LCJ4-1;
.LCJ4:
.LN31:
// line 135
	m3=dm(-12,i6);
	i5=dm(-11,i6);
	i12=dm(m7,i6);
	jump (m14,i12) (db); rframe; nop;
.LN._flanger_with_feedback.end:
._flanger_with_feedback.end:
	.global _flanger_with_feedback;
	.type _flanger_with_feedback,STT_FUNC;

	.file_attr ProjectName="AudioProcessing";
	.file_attr FuncName="_fabs";
	.file_attr FuncName="_fabsf";
	.file_attr FuncName="_fclipf";
	.file_attr FuncName="_fsignf";
	.file_attr FuncName="_copysignf";
	.file_attr FuncName="_favgf";
	.file_attr FuncName="_fmaxf";
	.file_attr FuncName="_fminf";
	.file_attr FuncName="_llabs";
	.file_attr FuncName="_llmin";
	.file_attr FuncName="_llmax";
	.file_attr FuncName="_favg";
	.file_attr FuncName="_fclip";
	.file_attr FuncName="_fmax";
	.file_attr FuncName="_fmin";
	.file_attr FuncName="_copysign";
	.file_attr FuncName="_fsign";
	.file_attr FuncName="_flanger";
	.file_attr FuncName="_flanger_with_feedback";
	.file_attr Encoding="SW";
	.file_attr Content="CodeData";
.epctext.end:

	.extern _sinf;
	.type _sinf,STT_FUNC;
	.extern _normalization;
	.type _normalization,STT_FUNC;
	.extern ___divrem_s32;
	.type ___divrem_s32,STT_FUNC;

	.section .debug_abbrev;

	.align 1;
	.type .epcabbrev,STT_OBJECT;
.epcabbrev:
	.inc/binary ".\src\Flanger.sbn", 0, 259;
.epcabbrev.end:

	.section .debug_info;

	.align 1;
	.type .epcdebug,STT_OBJECT;
.epcdebug:
	.byte =
		0xFE,0x0D,0x00,0x00,0x02,0x00;
	.var = .epcabbrev;
	.byte =
		0x04,0x01,0x2E,0x2E,0x5C,0x73,0x72,0x63,0x5C,0x46,0x6C,0x61,
		0x6E,0x67,0x65,0x72,0x2E,0x63,0x00,0x0C;
	.var = .epcline;
	.inc/binary ".\src\Flanger.sbn", 259, 2853;
	.var = .LN_flanger;
	.var = .LN._flanger.end;
	.byte =
		0x01,0x01,0x00,0x12,0x69,0x6E,0x70,0x75,0x74,0x5F,0x73,0x69,
		0x67,0x6E,0x61,0x6C,0x00,0x68,0x0C,0x00,0x00,0x02,0x86,0x76,
		0x00,0x12,0x6F,0x75,0x74,0x70,0x75,0x74,0x5F,0x73,0x69,0x67,
		0x6E,0x61,0x6C,0x00,0x68,0x0C,0x00,0x00,0x02,0x86,0x77,0x00,
		0x12,0x73,0x69,0x67,0x6E,0x61,0x6C,0x5F,0x6C,0x65,0x6E,0x67,
		0x74,0x68,0x00,0xDE,0x01,0x00,0x00,0x02,0x86,0x78,0x00,0x12,
		0x46,0x6C,0x66,0x6F,0x00,0x02,0x03,0x00,0x00,0x02,0x86,0x01,
		0x00,0x12,0x67,0x61,0x69,0x6E,0x00,0x02,0x03,0x00,0x00,0x02,
		0x86,0x02,0x00,0x13,0x00,0x00,0x00,0x00;
	.var = .LN0;
	.var = .LN._flanger.end;
	.byte =
		0x14,0x6F,0x6D,0x65,0x67,0x61,0x00,0x01,0x63,0x0C,0x00,0x00,
		0x02,0x86,0x79,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,
		0x00;
	.var = .LN1;
	.var = .LN14;
	.byte =
		0x14,0x69,0x00,0x01,0xDE,0x01,0x00,0x00,0x02,0x86,0x7A,0x00,
		0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x00;
	.var = .LN3;
	.var = .LN14;
	.byte =
		0x14,0x64,0x00,0x01,0x02,0x03,0x00,0x00,0x02,0x86,0x7B;
	.var = .LN13-.LN3;
	.byte =
		0x00,0x14,0x64,0x5F,0x69,0x6E,0x74,0x00,0x01,0xDE,0x01,0x00,
		0x00,0x02,0x86,0x7C;
	.var = .LN13-.LN3;
	.byte =
		0x00,0x14,0x66,0x72,0x61,0x63,0x00,0x01,0x02,0x03,0x00,0x00,
		0x02,0x86,0x7D;
	.var = .LN13-.LN3;
	.byte =
		0x00,0x13,0x00,0x00,0x00,0x00;
	.var = .LN9;
	.var = .LN12;
	.byte =
		0x14,0x64,0x65,0x6C,0x61,0x79,0x65,0x64,0x5F,0x73,0x61,0x6D,
		0x70,0x6C,0x65,0x00,0x01,0x02,0x03,0x00,0x00,0x02,0x86,0x7E,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x02,
		0x03,0x00,0x00,0x07,0x00,0x02,0x03,0x00,0x00,0x11,0xD5,0x0D,
		0x00,0x00,0x66,0x6C,0x61,0x6E,0x67,0x65,0x72,0x5F,0x77,0x69,
		0x74,0x68,0x5F,0x66,0x65,0x65,0x64,0x62,0x61,0x63,0x6B,0x00,
		0x01;
	.var = .LN_flanger_with_feedback;
	.var = .LN._flanger_with_feedback.end;
	.inc/binary ".\src\Flanger.sbn", 3112, 139;
	.var = .LN17;
	.var = .LN._flanger_with_feedback.end;
	.byte =
		0x14,0x6F,0x6D,0x65,0x67,0x61,0x00,0x01,0x02,0x03,0x00,0x00,
		0x02,0x86,0x79,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,
		0x00;
	.var = .LN18;
	.var = .LN29;
	.byte =
		0x14,0x69,0x00,0x01,0xDE,0x01,0x00,0x00,0x02,0x86,0x7A,0x00,
		0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x00;
	.var = .LN20;
	.var = .LN29;
	.byte =
		0x14,0x63,0x75,0x72,0x72,0x65,0x6E,0x74,0x5F,0x64,0x65,0x6C,
		0x61,0x79,0x00,0x01,0x02,0x03,0x00,0x00,0x02,0x86,0x7B;
	.var = .LN28-.LN20;
	.byte =
		0x00,0x14,0x64,0x65,0x6C,0x61,0x79,0x5F,0x69,0x6E,0x64,0x65,
		0x78,0x00,0x01,0xDE,0x01,0x00,0x00,0x02,0x86,0x7C;
	.var = .LN28-.LN20;
	.byte =
		0x00,0x14,0x62,0x75,0x66,0x66,0x65,0x72,0x5F,0x69,0x6E,0x64,
		0x65,0x78,0x00,0x01,0xDE,0x01,0x00,0x00,0x02,0x86,0x7D;
	.var = .LN28-.LN20;
	.byte =
		0x00,0x14,0x64,0x65,0x6C,0x61,0x79,0x65,0x64,0x5F,0x73,0x61,
		0x6D,0x70,0x6C,0x65,0x00,0x01,0x02,0x03,0x00,0x00,0x02,0x86,
		0x7E;
	.var = .LN28-.LN20;
	.byte =
		0x00,0x00,0x00,0x00,0x00,0x14,0x64,0x65,0x6C,0x61,0x79,0x42,
		0x75,0x66,0x66,0x65,0x72,0x00,0x01,0xF2,0x0D,0x00,0x00,0x05,
		0x03;
	.var = _delayBuffer;
	.byte =
		0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x00,0x02,0x03,
		0x00,0x00,0x09,0x22,0x00,0x21,0x00,0x00,0x00;
.epcdebug.end:

	.section .debug_line;

	.align 1;
	.type .epcline,STT_OBJECT;
.epcline:
	.inc/binary ".\src\Flanger.sbn", 3251, 645;
	.var = .LN_flanger;
	.byte =
		0x04,0x01,0x05,0x64,0x23,0x00,0x05,0x02;
	.var = .LN0;
	.byte =
		0x05,0x17,0x0A,0x00,0x05,0x02;
	.var = .LN1;
	.byte =
		0x05,0x10,0x0B,0x00,0x05,0x02;
	.var = .LN2;
	.byte =
		0x05,0x05,0x01,0x00,0x05,0x02;
	.var = .LN3;
	.byte =
		0x05,0x11,0x0A,0x00,0x05,0x02;
	.var = .LN4;
	.byte =
		0x05,0x32,0x01,0x00,0x05,0x02;
	.var = .LN5;
	.byte =
		0x05,0x11,0x01,0x00,0x05,0x02;
	.var = .LN6;
	.byte =
		0x05,0x13,0x0A,0x00,0x05,0x02;
	.var = .LN7;
	.byte =
		0x05,0x14,0x0A,0x00,0x05,0x02;
	.var = .LN8;
	.byte =
		0x05,0x09,0x0B,0x00,0x05,0x02;
	.var = .LN9;
	.byte =
		0x05,0x22,0x0B,0x00,0x05,0x02;
	.var = .LN10;
	.byte =
		0x05,0x0D,0x0B,0x00,0x05,0x02;
	.var = .LN11;
	.byte =
		0x05,0x09,0x0A,0x00,0x05,0x02;
	.var = .LN12;
	.byte =
		0x05,0x0D,0x0A,0x00,0x05,0x02;
	.var = .LN13;
	.byte =
		0x05,0x28,0x03,0x75,0x01,0x00,0x05,0x02;
	.var = .LN14;
	.byte =
		0x05,0x05,0x17,0x00,0x05,0x02;
	.var = .LN15;
	.byte =
		0x05,0x12,0x01,0x00,0x05,0x02;
	.var = .LN16;
	.byte =
		0x05,0x01,0x0A,0x00,0x05,0x02;
	.var = .LN._flanger.end;
	.byte =
		0x00,0x01,0x01,0x00,0x05,0x02;
	.var = .LN_flanger_with_feedback;
	.byte =
		0x04,0x01,0x05,0x92,0x01,0x7E,0x00,0x05,0x02;
	.var = .LN17;
	.byte =
		0x05,0x11,0x0A,0x00,0x05,0x02;
	.var = .LN18;
	.byte =
		0x05,0x10,0x0B,0x00,0x05,0x02;
	.var = .LN19;
	.byte =
		0x05,0x05,0x01,0x00,0x05,0x02;
	.var = .LN20;
	.byte =
		0x05,0x1D,0x0A,0x00,0x05,0x02;
	.var = .LN21;
	.byte =
		0x05,0x28,0x01,0x00,0x05,0x02;
	.var = .LN22;
	.byte =
		0x05,0x1D,0x01,0x00,0x05,0x02;
	.var = .LN23;
	.byte =
		0x05,0x19,0x0A,0x00,0x05,0x02;
	.var = .LN24;
	.byte =
		0x05,0x1A,0x0B,0x00,0x05,0x02;
	.var = .LN25;
	.byte =
		0x05,0x1E,0x0A,0x00,0x05,0x02;
	.var = .LN26;
	.byte =
		0x05,0x09,0x0B,0x00,0x05,0x02;
	.var = .LN27;
	.byte =
		0x0B,0x00,0x05,0x02;
	.var = .LN28;
	.byte =
		0x05,0x28,0x03,0x77,0x01,0x00,0x05,0x02;
	.var = .LN29;
	.byte =
		0x05,0x05,0x15,0x00,0x05,0x02;
	.var = .LN30;
	.byte =
		0x05,0x12,0x01,0x00,0x05,0x02;
	.var = .LN31;
	.byte =
		0x05,0x01,0x0B,0x00,0x05,0x02;
	.var = .LN._flanger_with_feedback.end;
	.byte =
		0x00,0x01,0x01;
.epcline.end:

	.section .debug_pubnames;

	.align 1;
.epcpubnames:
	.type .epcpubnames,STT_OBJECT;
	.byte =
		0x44,0x00,0x00,0x00,0x02,0x00;
	.var = .epcdebug;
	.byte =
		0x02,0x0E,0x00,0x00,0x39,0x0B,0x00,0x00,0x66,0x6C,0x61,0x6E,
		0x67,0x65,0x72,0x00,0x6E,0x0C,0x00,0x00,0x66,0x6C,0x61,0x6E,
		0x67,0x65,0x72,0x5F,0x77,0x69,0x74,0x68,0x5F,0x66,0x65,0x65,
		0x64,0x62,0x61,0x63,0x6B,0x00,0xD5,0x0D,0x00,0x00,0x64,0x65,
		0x6C,0x61,0x79,0x42,0x75,0x66,0x66,0x65,0x72,0x00,0x00,0x00,
		0x00,0x00;
.epcpubnames.end:

	.section .debug_aranges;

	.align 1;
.epcaranges:
	.type .epcaranges,STT_OBJECT;
	.byte =
		0x20,0x00,0x00,0x00,0x02,0x00;
	.var = .epcdebug;
	.byte =
		0x01,0x00;
	.var = .LN_flanger;
	.var = .LN._flanger.end-.LN_flanger;
	.var = .LN_flanger_with_feedback;
	.var = .LN._flanger_with_feedback.end-.LN_flanger_with_feedback;
	.byte =
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00;
.epcaranges.end:

	.section/DM/DOUBLE32 seg_dmda;


	.align 2;
	.var _delayBuffer[34];
	.weak _delayBuffer;
